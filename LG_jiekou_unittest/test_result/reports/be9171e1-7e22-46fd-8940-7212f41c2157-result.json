{"name": "test_withdraw_10", "status": "failed", "statusDetails": {"message": "AssertionError: '余额必须大于0并且小于或者等于5000000' != '金额必须大于0并且小于或者等于500000'\n- 余额必须大于0并且小于或者等于5000000\n? ^                    -\n+ 金额必须大于0并且小于或者等于500000\n? ^", "trace": "self = <test_withdraw.Withdraw testMethod=test_withdraw_10>\nitem = {'case_id': 10, 'check_sql': None, 'data': '{\"member_id\": \"#member_id#\",\"amount\": -600}', 'expected': \"{'code': 2, 'msg': '金额必须大于0并且小于或者等于500000'}\", ...}\n\n    @my_ddt1.data(*case_data)\n    def test_withdraw(self,item):\n        url=conf.get('env','base_url')+item['url']\n        headers = eval(conf.get('env', 'headers'))\n        headers['Authorization'] = self.token\n        method=item['method']\n        expected=eval(item['expected'])\n        data=item['data']\n        data=eval(replace_data(data,Withdraw))\n    \n        if item['check_sql']:\n            sql = f\"select leave_amount from futureloan.member where id={self.member_id}\"\n            db_leave_amount_before = db.find_all(sql)[0]['leave_amount']\n    \n            sql = f\"SELECT COUNT(1) FROM futureloan.financelog,futureloan.member WHERE pay_member_id = member.id AND member.id={self.member_id}\"\n            count_befor = db.find_all(sql)[0]['COUNT(1)']\n    \n        res=requests.request(url=url,method=method,json=data,headers=headers)\n        print(res.text)\n        print(item['expected'])\n        try:\n            if expected['msg']=='OK':\n                leave_amount_after = jsonpath(res.json(), '$..leave_amount')[0]\n                self.assertEqual((decimal.Decimal(str(self.leave_amount_before))-decimal.Decimal(str(leave_amount_after))),\n                                 decimal.Decimal(str(data['amount'])))\n    \n                sql = f\"select leave_amount from futureloan.member where id={self.member_id}\"\n                db_leave_amount_after = db.find_all(sql)[0]['leave_amount']\n                self.assertEqual((db_leave_amount_before-db_leave_amount_after),\n                                 decimal.Decimal(str(data['amount'])))\n    \n                sql = f\"SELECT COUNT(1) FROM futureloan.financelog,futureloan.member WHERE pay_member_id = member.id AND member.id={self.member_id}\"\n                count_after = db.find_all(sql)[0]['COUNT(1)']\n                self.assertEqual((count_after-count_befor),1)\n    \n            self.assertEqual(res.json()['code'],expected['code'])\n            self.assertEqual(res.json()['msg'], expected['msg'])\n        except Exception as e:\n            log.error(f\"{item['interface']}：{item['title']}【失败】*****\")\n            log.exception(e)\n>           raise e\n\ntestcase\\test_withdraw.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestcase\\test_withdraw.py:65: in test_withdraw\n    self.assertEqual(res.json()['msg'], expected['msg'])\nE   AssertionError: '余额必须大于0并且小于或者等于5000000' != '金额必须大于0并且小于或者等于500000'\nE   - 余额必须大于0并且小于或者等于5000000\nE   ? ^                    -\nE   + 金额必须大于0并且小于或者等于500000\nE   ? ^"}, "description": "提现金额为负数", "attachments": [{"name": "log", "source": "2fdec42b-d9f5-438b-9b08-a4493f741ba2-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e1788fea-31e2-4e3c-9558-5ccac2603779-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4a5a1ba8-491c-47a7-82e8-7fd109644bd2-attachment.txt", "type": "text/plain"}], "start": 1638596776163, "stop": 1638596776352, "uuid": "a221c3c3-4e7e-4cbb-bf5c-a3bdca7a75d9", "historyId": "3629cce40efbc60d93f304bbc1280a50", "testCaseId": "2d2479280a0a3fa06bf7976e0e0b678e", "fullName": "testcase.test_withdraw.Withdraw#test_withdraw_10", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_withdraw"}, {"name": "subSuite", "value": "Withdraw"}, {"name": "host", "value": "PC201706040943"}, {"name": "thread", "value": "5004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_withdraw"}]}