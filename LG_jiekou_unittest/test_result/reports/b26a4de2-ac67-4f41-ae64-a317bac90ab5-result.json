{"name": "test_recharge_6", "status": "failed", "statusDetails": {"message": "AssertionError: '余额必须大于0并且小于或者等于500000' != '金额必须大于0并且小于或者等于500000'\n- 余额必须大于0并且小于或者等于500000\n? ^\n+ 金额必须大于0并且小于或者等于500000\n? ^", "trace": "self = <test_recharge.Recharge testMethod=test_recharge_6>\nitem = {'case_id': 6, 'check_sql': None, 'data': '{\"member_id\":\"#member_id#\",\"amount\":-1}', 'expected': '{\"code\":2,\"msg\":\"金额必须大于0并且小于或者等于500000\"}', ...}\n\n    @my_ddt1.data(*case_data)\n    def test_recharge(self,item):\n        url=conf.get('env','base_url')+item['url']\n        headers = eval(conf.get('env', 'headers'))\n        headers['Authorization'] = self.token\n        method=item['method']\n        expected=eval(item['expected'])\n        data=item['data']\n        data=eval(replace_data(data,Recharge))\n    \n        if item['check_sql']:\n            sql = f\"select leave_amount from futureloan.member where id={self.member_id}\"\n            db_leave_amount_before = db.find_all(sql)[0]['leave_amount']\n    \n            sql = f\"SELECT COUNT(1) FROM futureloan.financelog,futureloan.member WHERE income_member_id = member.id AND member.id={self.member_id}\"\n            count_befor = db.find_all(sql)[0]['COUNT(1)']\n    \n        res=requests.request(url=url,method=method,json=data,headers=headers)\n        print(res.text)\n        print(item['expected'])\n        try:\n            if expected['msg']=='OK':\n                leave_amount_after = jsonpath(res.json(), '$..leave_amount')[0]\n                self.assertEqual((decimal.Decimal(str(leave_amount_after))-decimal.Decimal(str(self.leave_amount_before))),\n                                 decimal.Decimal(str(data['amount'])))\n    \n                sql = f\"select leave_amount from futureloan.member where id={self.member_id}\"\n                db_leave_amount_after = db.find_all(sql)[0]['leave_amount']\n                self.assertEqual((db_leave_amount_after-db_leave_amount_before),\n                                 decimal.Decimal(str(data['amount'])))\n    \n                sql = f\"SELECT COUNT(1) FROM futureloan.financelog,futureloan.member WHERE income_member_id = member.id AND member.id={self.member_id}\"\n                count_after = db.find_all(sql)[0]['COUNT(1)']\n                self.assertEqual((count_after-count_befor),1)\n    \n            self.assertEqual(res.json()['code'],expected['code'])\n            self.assertEqual(res.json()['msg'], expected['msg'])\n        except Exception as e:\n            log.error(f\"{item['interface']}：{item['title']}【失败】*****\")\n            log.exception(e)\n>           raise e\n\ntestcase\\test_recharge.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntestcase\\test_recharge.py:59: in test_recharge\n    self.assertEqual(res.json()['msg'], expected['msg'])\nE   AssertionError: '余额必须大于0并且小于或者等于500000' != '金额必须大于0并且小于或者等于500000'\nE   - 余额必须大于0并且小于或者等于500000\nE   ? ^\nE   + 金额必须大于0并且小于或者等于500000\nE   ? ^"}, "description": "充值金额为负数", "attachments": [{"name": "log", "source": "1504660a-f99d-4a03-91c8-5c520c78e67c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "342b2ce5-baf1-4aee-952c-f86116c56e2e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "4f6b89c6-66fa-4555-bd06-4f326576e555-attachment.txt", "type": "text/plain"}], "start": 1638596601909, "stop": 1638596602088, "uuid": "2768d8f9-7d72-41cd-a374-f666e8d395ca", "historyId": "ef6b8e049c88596f75857adcbfab4103", "testCaseId": "4d24f8b0ea3ac13bf639f10dbaa705f6", "fullName": "testcase.test_recharge.Recharge#test_recharge_6", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_recharge"}, {"name": "subSuite", "value": "Recharge"}, {"name": "host", "value": "PC201706040943"}, {"name": "thread", "value": "10132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_recharge"}]}